library(spBayes)
install.packages('spBayes')
q()
install.packages('spBayes')
library(spBayes)
rm(list = ls())#
set.seed(10)#
#
###
## Libraries and Subroutines#
###
setwd('~/1dSpatialSim/')#
source('dinvgamma.R')#
# source('make.output.plot.R')#
source('make.output.plot.ci.R')#
library(mvtnorm)#
source('make.spatial.field.R')#
setwd('~/1dSpatialSim/spatialSmoothingFixed//')#
source('mcmc.spatial.R')#
###
## Plot of 1d spatial mcmc output#
###
#
make.output.plot <- function(out){#
  n.burn <- floor(n.mcmc / 5)#
  #x11()#
  layout(matrix(1:16, nrow = 4))#
  ##
#   matplot(t(out$mu.beta.save)[(n.burn + 1):n.mcmc, ], type = 'l')#
#   abline(h = beta[1], col = 'black')#
#   abline(h = beta[2], col = 'red')#
  ##
  plot(out$sigma.squared.beta.save[(n.burn + 1):n.mcmc], type = 'l')#
  ##
  plot(out$sigma.squared.epsilon.save[(n.burn + 1):n.mcmc], type = 'l', main = paste("accept rate", round(out$epsilon.accept, 2)))#
  abline(h = s2.e, col = 'red')#
  ##
  plot(out$sigma.squared.eta.save[(n.burn + 1):n.mcmc], type = 'l', main = paste("accept rate", round(out$eta.accept, 2)))#
  abline(h = s2.s, col = 'red')#
  ##
  plot(out$phi.save[(n.burn + 1):n.mcmc], type = 'l', main = paste("accept rate", round(out$phi.accept, 2)))#
  abline(h = phi, col = 'red')#
  ##
  matplot(out$fort.raster, type = 'l', ylim = c(min(out$fort.raster) - 2*max(sqrt(out$var.save)), max(out$fort.raster) + 2*max(sqrt(out$var.save))))#
  matplot(out$fort.raster - 2*sqrt(out$var.save), type = 'l', add = TRUE, col = 'red', lty = 'dashed')#
  matplot(out$fort.raster + 2*sqrt(out$var.save), type = 'l', add = TRUE, col = 'red', lty = 'dashed')#
  points(X %*% beta, type = 'l', col = 'red')  #
  ##
  plot.Z.field(field$Z.list, locs = locs, main = "True Surface")#
  ##
  ##
  plot.Y.field(field$Y.list, field$H.list, locs = locs)#
  ##
  hist(out$mu.beta.save[1, ][(n.burn + 1):n.mcmc])#
  abline(v = beta[1], col = 'red')#
  abline(v = quantile(out$mu.beta.save[1, ], probs = c(0.025, 0.975)), col = 'blue')#
  ##
  hist(out$mu.beta.save[2, ][(n.burn + 1):n.mcmc])#
  abline(v = beta[2], col = 'red')#
  abline(v = quantile(out$mu.beta.save[2, ], probs = c(0.025, 0.975)), col = 'blue')#
  ##
  MSPE <- (out$fort.raster - matrix(unlist(field$Z.list), nrow = m, byrow = FALSE))^2#
  matplot(MSPE, type = 'l', main = 'MSPE')#
}#
###
## Simulate Data#
###
#
m <- 500 # number of spatial locations#
locs <- seq(0, 1, , m) # spatial coordinate#
X <- cbind(rep(1, m), locs)#
reps <- 10#20 # number of spatial fields#
beta <- c(0, 2) # beta#
s2.s <- 1#
phi <- 0.25#
s2.e <- 0.01#
samp.size <- 5:40#
#
field <- make.spatial.field(reps, X, beta, locs, c(s2.s, phi), method = 'exponential', s2.e, samp.size)#
#
layout(matrix(1:2, ncol = 2))#
# plot.Y.field(field$Y.list[1:(reps / 2)], field$H.list[1:(reps / 2)], locs)#
# plot.Z.field(field$Z.list[(reps / 2 + 1):reps], locs, main = "Full Data")#
plot.Y.field(field$Y.list, field$H.list, locs)#
plot.Z.field(field$Z.list, locs, main = "Full Data")#
#
# Y.list <- field$Y.list[1:(reps / 2)]#
# H.list <- field$H.list[1:(reps / 2)]#
# Z.list <- field$Z.list[(reps / 2 + 1):reps]#
Y.list <- field$Y.list#
H.list <- field$H.list#
Z.list <- field$Z.list#
#
###
## Initialize priors and tuning paramteters#
###
#
mu.0 <- rep(0, dim(X)[2])#
sigma.squared.0 <- 0.025#
#Sigma.0 <-#
alpha.beta <- 2#
beta.beta <- 0.2#
curve(dinvgamma(x, alpha.beta, beta.beta))#
###
alpha.eta <- 12#
beta.eta <- 12#
curve(dinvgamma(x, alpha.eta, beta.eta), from = 0, to = 6)#
abline(v = s2.s, col = 'red')#
###
alpha.epsilon <- 1#
beta.epsilon <- 0.1#
curve(dinvgamma(x, alpha.epsilon, beta.epsilon), from = 0, to = 6)#
abline(v = s2.e, col = 'red')#
###
alpha.phi <- 4#
beta.phi <- 1#
curve(dinvgamma(x, alpha.phi, beta.phi), from = 0, to = 6)#
abline(v = phi, col = 'red')#
###
sigma.squared.beta.tune <- 0.025#
sigma.squared.eta.tune <- 0.25#
sigma.squared.epsilon.tune <- 0.075#
phi.tune <- 0.25#
#
n.mcmc <- 1000#
#
mu.beta <- c(0, 2)
?spLM
Y.list[[1]]
X
Y.list[[1]] ~ X[H.list[[1]]]
Y.list[[1]] ~ X[H.list[[1]]]
X[H.list[[1]]]
X[H.list[[1]],]
Y.list[[1]] ~ X[H.list[[1]],]
spLM(Y.list[[1]] ~ X[H.list[[1]],])
spLM(Y.list[[1]] ~ X[H.list[[1]],], n.samples = 1000)
cbind(rep(0, m), locs)
locs
m
cbind(rep(0, m), locs)
spLM(Y.list[[1]] ~ X[H.list[[1]],], coords = cbind(rep(0, m), locs), n.samples = 1000)
X
spLM(Y.list[[1]] ~ X[H.list[[1]],], coords = cbind(rep(0, m), locs), n.samples = 1000)
spLM(Y.list[[1]] ~ X[H.list[[1]],]-1, coords = cbind(rep(0, m), locs), n.samples = 1000)
Not run:
Not run:
Not run:
Not run:
rmvn <- function(n, mu=0, V = matrix(1)){
rmvn <- function(n, mu=0, V = matrix(1)){
Not run: #
rmvn <- function(n, mu=0, V = matrix(1)){#
  p <- length(mu)#
  if(any(is.na(match(dim(V),p))))#
    stop("Dimension problem!")#
  D <- chol(V)#
  t(matrix(rnorm(n*p), ncol=p)%*%D + rep(mu,rep(n,p)))#
}#
#
set.seed(1)#
#
n <- 100#
coords <- cbind(runif(n,0,1), runif(n,0,1))#
X <- as.matrix(cbind(1, rnorm(n)))#
#
B <- as.matrix(c(1,5))#
p <- length(B)#
#
sigma.sq <- 2#
tau.sq <- 0.1#
phi <- 3/0.5#
#
D <- as.matrix(dist(coords))#
R <- exp(-phi*D)#
w <- rmvn(1, rep(0,n), sigma.sq*R)#
y <- rnorm(n, X%*%B + w, sqrt(tau.sq))#
#
n.samples <- 2000#
#
starting <- list("phi"=3/0.5, "sigma.sq"=50, "tau.sq"=1)#
#
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)#
#
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),#
                 "phi.Unif"=c(3/1, 3/0.1), "sigma.sq.IG"=c(2, 2),#
                 "tau.sq.IG"=c(2, 0.1))#
#
priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),#
                 "sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))#
#
cov.model <- "exponential"#
#
n.report <- 500#
verbose <- TRUE#
#
m.1 <- spLM(y~X-1, coords=coords, starting=starting,#
            tuning=tuning, priors=priors.1, cov.model=cov.model,#
            n.samples=n.samples, verbose=verbose, n.report=n.report)#
#
m.2 <- spLM(y~X-1, coords=coords, starting=starting,#
            tuning=tuning, priors=priors.2, cov.model=cov.model,#
            n.samples=n.samples, verbose=verbose, n.report=n.report)#
#
burn.in <- 0.5*n.samples#
#
##recover beta and spatial random effects#
m.1 <- spRecover(m.1, start=burn.in, verbose=FALSE)#
m.2 <- spRecover(m.2, start=burn.in, verbose=FALSE)#
#
round(summary(m.1$p.theta.recover.samples)$quantiles[,c(3,1,5)],2)#
round(summary(m.2$p.theta.recover.samples)$quantiles[,c(3,1,5)],2)#
#
round(summary(m.1$p.beta.recover.samples)$quantiles[,c(3,1,5)],2)#
round(summary(m.2$p.beta.recover.samples)$quantiles[,c(3,1,5)],2)#
#
m.1.w.summary <- summary(mcmc(t(m.1$p.w.recover.samples)))$quantiles[,c(3,1,5)]#
m.2.w.summary <- summary(mcmc(t(m.2$p.w.recover.samples)))$quantiles[,c(3,1,5)]#
#
plot(w, m.1.w.summary[,1], xlab="Observed w", ylab="Fitted w",#
     xlim=range(w), ylim=range(m.1.w.summary), main="Spatial random effects")#
arrows(w, m.1.w.summary[,1], w, m.1.w.summary[,2], length=0.02, angle=90)#
arrows(w, m.1.w.summary[,1], w, m.1.w.summary[,3], length=0.02, angle=90)#
lines(range(w), range(w))#
#
points(w, m.2.w.summary[,1], col="blue", pch=19, cex=0.5)#
arrows(w, m.2.w.summary[,1], w, col="blue", m.2.w.summary[,2], length=0.02, angle=90)#
arrows(w, m.2.w.summary[,1], w, col="blue", m.2.w.summary[,3], length=0.02, angle=90)#
#
############################
##Predictive process model#
############################
m.1 <- spLM(y~X-1, coords=coords, knots=c(6,6,0.1), starting=starting,#
            tuning=tuning, priors=priors.1, cov.model=cov.model,#
            n.samples=n.samples, verbose=verbose, n.report=n.report)#
#
m.2 <- spLM(y~X-1, coords=coords, knots=c(6,6,0.1), starting=starting,#
            tuning=tuning, priors=priors.2, cov.model=cov.model,#
            n.samples=n.samples, verbose=verbose, n.report=n.report)#
#
burn.in <- 0.5*n.samples#
#
round(summary(window(m.1$p.beta.samples, start=burn.in))$quantiles[,c(3,1,5)],2)#
round(summary(window(m.2$p.beta.samples, start=burn.in))$quantiles[,c(3,1,5)],2)#
#
round(summary(window(m.1$p.theta.samples, start=burn.in))$quantiles[,c(3,1,5)],2)#
round(summary(window(m.2$p.theta.samples, start=burn.in))$quantiles[,c(3,1,5)],2)#
#
## End(Not run)
y
x
X
